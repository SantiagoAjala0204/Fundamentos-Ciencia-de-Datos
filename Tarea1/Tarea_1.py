# -*- coding: utf-8 -*-
"""Tarea2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19VZk8EIiI-zj3HqHbExUmo4pzA8-rvEH
"""

#pip install openmeteo-requests
#pip install requests-cache retry-requests numpy pandas

import openmeteo_requests

import requests_cache
import pandas as pd
from retry_requests import retry

# Setup the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after = 3600)
retry_session = retry(cache_session, retries = 5, backoff_factor = 0.2)
openmeteo = openmeteo_requests.Client(session = retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://api.open-meteo.com/v1/forecast"
params = {
	"latitude": 0.348929,
	"longitude": -78.123108,
	"hourly": ["temperature_2m", "rain", "wind_speed_120m", "soil_temperature_18cm", "cloud_cover"]
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
print(f"Coordinates {response.Latitude()}°N {response.Longitude()}°E")
print(f"Elevation {response.Elevation()} m asl")
print(f"Timezone {response.Timezone()}{response.TimezoneAbbreviation()}")
print(f"Timezone difference to GMT-5 {response.UtcOffsetSeconds()} s")

# Process hourly data. The order of variables needs to be the same as requested.
hourly = response.Hourly()
hourly_temperature_2m = hourly.Variables(0).ValuesAsNumpy()
hourly_rain = hourly.Variables(1).ValuesAsNumpy()
hourly_wind_speed_120m = hourly.Variables(2).ValuesAsNumpy()
hourly_soil_temperature_18cm = hourly.Variables(3).ValuesAsNumpy()
hourly_cloud_cover = hourly.Variables(4).ValuesAsNumpy()

hourly_data = {"date": pd.date_range(
	start = pd.to_datetime(hourly.Time(), unit = "s", utc = True),
	end = pd.to_datetime(hourly.TimeEnd(), unit = "s", utc = True),
	freq = pd.Timedelta(seconds = hourly.Interval()),
	inclusive = "left"
)}

hourly_data["temperature_2m"] = hourly_temperature_2m
hourly_data["rain"] = hourly_rain
hourly_data["wind_speed_120m"] = hourly_wind_speed_120m
hourly_data["soil_temperature_18cm"] = hourly_soil_temperature_18cm
hourly_data["cloud_cover"] = hourly_cloud_cover

hourly_dataframe = pd.DataFrame(data = hourly_data)
print(hourly_dataframe)

#Tipo de datos
hourly_dataframe.dtypes

#Maximo fecha datos
hourly_dataframe['date'].max()

"""#Análisis temperatura 2m a las 13:00"""

# Filter the DataFrame for the next week
next_week_df = hourly_dataframe.copy().reset_index(drop=True)
#Filtrar hora de almuerzo
next_week_df  = next_week_df[(next_week_df['date'].dt.time == pd.to_datetime('13:00:00').time())].reset_index(drop=True)
#Obtener dia de las semana
next_week_df['day_of_week'] = next_week_df['date'].dt.day_name()
next_week_df

#Grafico de linea utiliznado seaborn entre el dia de la semana con la temperatura
import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(12, 6))
sns.lineplot(data=next_week_df, x='day_of_week', y='temperature_2m', marker='o', color='seagreen', linewidth=2)
plt.title('Variación Temperatura', fontsize=14)
plt.xlabel('Día de la semana')
plt.ylabel('Temperatura celsius')
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('1_variacion_temperatura.png')
plt.show()

"""#Análisis del dia en donde hay mas viento (Horario laboral)"""

wind_speed_df = hourly_dataframe.copy()

# Filtra solo los registros entre las 7:00 y 18:00
wind_speed_df = wind_speed_df[(wind_speed_df['date'].dt.hour >= 7) & (wind_speed_df['date'].dt.hour <= 18)]

# Fecha con la mayor velocidad de viento
max_wind_speed_date = wind_speed_df.loc[wind_speed_df['wind_speed_120m'].idxmax(), 'date'].date()

# Filtra solo esa fecha
wind_speed_df = wind_speed_df[wind_speed_df['date'].dt.date == max_wind_speed_date].reset_index(drop=True)

#Columna con la hora

wind_speed_df['Hora']=wind_speed_df['date'].dt.hour

#Grafico de barra con la Hora y wind_speed_120m
plt.figure(figsize=(12, 6))
sns.barplot(data=wind_speed_df, x='Hora', y='wind_speed_120m', hue='wind_speed_120m', palette='Blues_d', legend=False)
#sns.barplot(data=wind_speed_df, x='Hora', y='wind_speed_120m', color='seagreen')
plt.title(f'Velocidad del viento en el día {max_wind_speed_date}', fontsize=14)
plt.xlabel('Hora del día')
plt.ylabel('Velocidad del viento (m/s)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('2_velocidad_viendo.png')
plt.show()

"""#Análisis de la temperatura durante la los dias de la semana"""

import datetime
#Temperatura durante la semena
df_temperature_week=hourly_dataframe.copy()
#Considerar solo los dias de la semana
df_temperature_week = df_temperature_week[
    (df_temperature_week['date'].dt.date >= datetime.date(2025, 4, 14)) &
    (df_temperature_week['date'].dt.date <= datetime.date(2025, 4, 18))
].reset_index(drop=True)

#Obtener dia de la semana

df_temperature_week['day_of_week'] = df_temperature_week['date'].dt.day_name()
df_temperature_week['Hour']=df_temperature_week['date'].dt.hour
# Establecer orden de los días de la semana (Lunes a Viernes)
dias_ordenados = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
df_temperature_week['day_of_week'] = pd.Categorical(
    df_temperature_week['day_of_week'],
    categories=dias_ordenados,
    ordered=True
)
#Filtra en de 7 ha 19
df_temperature_week = df_temperature_week[(df_temperature_week['Hour'] >= 7) & (df_temperature_week['Hour'] <= 19)]
df_temperature_week

import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.patches as patches

# Matriz para el Heapmap
heatmap_data = df_temperature_week.pivot(index="Hour", columns="day_of_week", values="temperature_2m")

# Crear el Heapmap
plt.figure(figsize=(10, 6))
ax = sns.heatmap(heatmap_data, annot=True, cmap="YlGnBu", fmt=".1f", linewidths=.5)

# Maxima temperatura
max_temp = heatmap_data.max().max()
max_pos = heatmap_data.stack().idxmax()  # (Hour, day_of_week)

# Obtener la el indice de la fila y columna de la maxima posición
row = heatmap_data.index.get_loc(max_pos[0])
col = heatmap_data.columns.get_loc(max_pos[1])

# Rentangulo rojo
rect = patches.Rectangle((col, row), 1, 1, fill=False, edgecolor='red', linewidth=2)
ax.add_patch(rect)

# Labels and title
plt.title("Temperatura durante la semana", fontsize=14)
plt.xlabel("Día de la semana")
plt.ylabel("Hora")
plt.tight_layout()
plt.savefig('3_variacion_temperatura_semana.png')
plt.show()

"""#Análisis de la cobertura de nubes"""

# Analysis cloud cover
df_cloud_cover=hourly_dataframe.copy()
#Filtra la columna date en el intervalo 2025-04-14 2025-04-18
df_cloud_cover = df_cloud_cover[
    (df_cloud_cover['date'].dt.date >= datetime.date(2025, 4, 14)) &
    (df_cloud_cover['date'].dt.date <= datetime.date(2025, 4, 18))
].reset_index(drop=True)
#Dias y horas
df_cloud_cover['day_of_week'] = df_cloud_cover['date'].dt.day_name()
df_cloud_cover['Hour']=df_cloud_cover['date'].dt.hour
# Establecer orden de los días de la semana (Lunes a Viernes)
dias_ordenados = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
df_cloud_cover['day_of_week'] = pd.Categorical(
    df_cloud_cover['day_of_week'],
    categories=dias_ordenados,
    ordered=True
)
#Filtrar la hora entre 7 am y 7 pm
df_cloud_cover = df_cloud_cover[(df_cloud_cover['Hour'] >= 7) & (df_cloud_cover['Hour'] <= 19)]
df_cloud_cover

#Heap Map cloud cover

# Matriz para el Heapmap
heatmap_data = df_cloud_cover.pivot(index="Hour", columns="day_of_week", values="cloud_cover")

# Crear el Heapmap
plt.figure(figsize=(10, 6))
ax = sns.heatmap(heatmap_data, annot=True, cmap="YlGnBu", fmt=".1f", linewidths=.5)

# Labels and title
plt.title("(%) Cobertura de nubes", fontsize=14)
plt.xlabel("Día de la semana")
plt.ylabel("Hora")
plt.tight_layout()
plt.savefig('4_cobertura_nubes_semana.png')
plt.show()

"""#Análisis de las variables: temperature_2m, wind_speed_120m, cloud_cover"""

#Analysis temperature_2m, wind_speed_120m, cloud_cover using line plot
df_week_3_varaibles=hourly_dataframe.copy()
#Filtra la columna date en el intervalo 2025-04-14 2025-04-18
df_week_3_varaibles = df_week_3_varaibles[
    (df_week_3_varaibles['date'].dt.date >= datetime.date(2025, 4, 14)) &
    (df_week_3_varaibles['date'].dt.date <= datetime.date(2025, 4, 18))
].reset_index(drop=True)
#Dias y horas
df_week_3_varaibles['Hour']=df_week_3_varaibles['date'].dt.hour
#Filtrar la hora entre 7 am y 7 pm
df_week_3_varaibles = df_week_3_varaibles[(df_week_3_varaibles['Hour'] >= 7) & (df_week_3_varaibles['Hour'] <= 19)]
df_week_3_varaibles

# Crear la figura y ejes
fig, ax1 = plt.subplots(figsize=(14, 6))

# Eje izquierdo: temperatura y viento
ax1.plot(df_week_3_varaibles['date'], df_week_3_varaibles['temperature_2m'], color='orangered', label='temperature_2m')
ax1.plot(df_week_3_varaibles['date'], df_week_3_varaibles['wind_speed_120m'], color='green', label='wind_speed_120m')
ax1.set_ylabel('°C / km/h', color='black')
ax1.tick_params(axis='y', labelcolor='black')

# Eje derecho: cobertura de nubes
ax2 = ax1.twinx()
ax2.plot(df_week_3_varaibles['date'], df_week_3_varaibles['cloud_cover'], color='steelblue', label='cloud_cover')
ax2.set_ylabel('% cloud cover', color='steelblue')
ax2.tick_params(axis='y', labelcolor='steelblue')

# Título y leyenda
plt.title("Clima del 14 al 18 de abril")
fig.autofmt_xdate()
lines_1, labels_1 = ax1.get_legend_handles_labels()
lines_2, labels_2 = ax2.get_legend_handles_labels()
# Leyenda debajo del gráfico
ax1.legend(
    lines_1 + lines_2, labels_1 + labels_2,
    loc='upper center',
    bbox_to_anchor=(0.5, -0.15),
    ncol=3,  # número de columnas para distribuir horizontalmente
    frameon=False  # sin borde
)


plt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)
plt.tight_layout(rect=[0, 0, 0.85, 1])  #Espacio para la leyenda
plt.tight_layout()
plt.savefig('5_clima_14_18_abril.png')
plt.show()